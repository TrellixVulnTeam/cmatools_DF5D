# ####################################################################
# GitHub workflow action file
# Tests that the code has already been formatted with correct code style
# Selected code style = black
# ####################################################################

# Name for workflow (also displayed on the associated badges)
name: code-style

# on: controls when the action will run. Triggers the workflow on push or pull request events
# Limits run only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


# Set environment variables so this workflow action is easy to re-use in other repos
env:
  REPO_NAME: cmatools
  CONDA_ENV: cmatools-min
  ENV_FILE: environment_minimum.yml
  PACKAGE: cmatools # Name of package directory within repo
  TESTS: tests # Name of tests directory within repo
  DISPATCH_NAME: style


jobs:
  check-code-style:
    timeout-minutes: 5 # Limit total time use of the workflow action, in case of problems
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # checkout code to the runner workspace root
    - name: Install dependencies
      # Keep dependency install to minimum - as only checking code style, not running the system
      run: |
        conda update conda
        conda env create -f $ENV_FILE
    - name: Install package
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        pip install .
    - name: Test code against code style
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        black $PACKAGE
        black $TESTS
    - name: Check event type
      id: event
      run: |
        echo "test"
        echo "$EVENT_NAME"
        echo ::set-output name=event::$(echo $'\''{"$EVENT_NAME"}$'\'')
      env:
        EVENT_NAME: '"event_type":"${{ env. DISPATCH_NAME }}"'
      #EVENT_NAME: '"event_type":"${{ steps.notes.outputs.notes }}"'
    - name: Create a repo level dispatches event
      # Dispatch event will only be created if the rest of the steps have completed first
      run: |
        echo "${{ env.DISPATCH_NAME }}"
        echo  "${{ env.EVENT_NAME }}"
        echo ${{ steps.event.outputs.event }}
        curl -X POST \
        -H "Accept: application/vnd.github.v3+json" \
        -u ${{ secrets.ACCESS_TOKEN }} \
        https://api.github.com/repos/cma-open/cmatools/dispatches \
        -d '{"event_type": ${{ steps.event.outputs.event }} }'
#  -d '{"event_type":"code-style-true"}'